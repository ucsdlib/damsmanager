<?xml version="1.0"?>
<project name="damsmanager" default="webapp" basedir=".">
    <description>XDRE Manager</description>
	<!-- deploy and versioning -->
	  <property name="appName" value="damsmanager"/>
      <property file="${user.home}/build.properties"/>
      <property file="${basedir}/build.properties"/>
	  <property name="src"       value="${basedir}/src"/>
	  <property name="web"   value="${basedir}/WebContent"/>
	  <property name="lib"   value="${web}/WEB-INF/lib"/>
	  <property name="dist"      value="${basedir}/dist"/>
	  <property name="tmp"       value="${basedir}/tmp"/>
	  <property name="webapp"    value="${tmp}/webapp"/>
	  <property name="conf"       value="${basedir}/conf"/>
	  <property name="props"     value="${conf}"/>
	  <property name="deploy" value="${basedir}/deploy"/>
	  <property name="test"   value="${basedir}/test"/>
	
	  <tstamp>
	    <format property="build.timestamp" pattern="yyyy-MM-dd'T'HH:mm:ssZ"/>
	  </tstamp>

	  <!-- version numbering -->
	  <target name="version">
	    <!-- app version from properties files -->
	    <property file="${props}/version.properties"/>
	    <property name="app.version"
	          value="${major.version}.${minor.version}"/>

	    <!-- src version from 'git describe' -->
	    <exec executable="git" outputproperty="src.version"
	        failifexecutionfails="false" errorproperty="">
	      <arg value="describe"/>
	      <arg value="--all"/>
	      <arg value="--always"/>
	      <arg value="--long"/>
	      <arg value="--abbrev=40"/>
	      <arg value="HEAD"/>
	    </exec>
	    <condition property="src.version" value="${src.version}" else="unknown">
	      <and>
	        <isset property="git.revision"/>
	        <length string="${git.revision}" trim="yes" length="0" when="greater"/>
	      </and>
	    </condition>

	    <!-- filters -->
	    <filterset id="version-filters">
	      <filter token="app_version"     value="${app.version}"/>
	      <filter token="src_version"     value="${src.version}"/>
	      <filter token="build_timestamp" value="${build.timestamp}"/>
	    </filterset>

	    <echo level="info" message="app ver..: ${app.version}"/>
	    <echo level="info" message="src ver..: ${src.version}"/>
	    <echo level="info" message="timestamp: ${build.timestamp}"/>

	  </target>

	  <path id="classpath">
	    <fileset dir="${lib}" id="lib">
	      <include name="*.jar"/>
	    </fileset>
	    <fileset dir="${deploy}" id="deploy">
	      <include name="*.jar"/>
	    </fileset>
	  </path>

      <path id="execpath">
        <fileset dir="${lib}" id="lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="${webapp}/WEB-INF/classes"/>
      </path>

	  <!-- clean -->
	  <target name="clean" description="Delete generated directories">
	    <delete dir="${tmp}"/>
	  </target>

	  <!-- prepare -->
	  <target name="prepare" description="Create output directories.">
	  	<delete dir="${tmp}"/>
	    <mkdir dir="${dist}"/>
	    <mkdir dir="${tmp}"/>
        <mkdir dir="${tmp}/converted"/>
	  	<mkdir dir="${webapp}/WEB-INF/classes"/>
	  </target>
	  <!-- compile -->
	  <target name="compile" description="Compile Java classes."
	      depends="prepare,version">
	    <!-- compile -->
	    <javac destdir="${webapp}/WEB-INF/classes" srcdir="${src};${test}"
	        deprecation="on" debug="true" debuglevel="lines,source" target="1.7"
	        includeantruntime="false" source="1.7">
	      <classpath refid="classpath"/>
	      <!-- <compilerarg line="-Xlint:unchecked"/> -->
	    </javac>

	    <!-- copy properties and jar files -->
	    <copy todir="${webapp}">
	      <fileset dir="${web}" excludes="**/web.xml"/>
	    </copy>
	    <copy todir="${webapp}/WEB-INF/classes">
	      <fileset dir="${conf}" includes="**/*"/>
	    </copy>
	    <copy file="${web}/WEB-INF/web.xml" tofile="${webapp}/WEB-INF/web.xml">
	      <filterset refid="version-filters"/>
	    </copy>
	  </target>
	  <!-- webapp -->
	  <target name="webapp" description="Build WAR file" depends="compile">
	    <!-- move old war file out of the way -->
	    <move file="${dist}/${appName}.war" tofile="${dist}/${appName}.bak"
	      failonerror="false"/>

	    <!-- generate new war file -->
	    <war basedir="${webapp}" destfile="${dist}/${appName}.war" webxml="${webapp}/WEB-INF/web.xml">
	      	<exclude name="WEB-INF/lib/servlet-api.jar" />
	    	<exclude name="WEB-INF/lib/jsp-api.jar" />
	        <exclude name="WEB-INF/web.xml"/>
	    </war>
	  </target>

	  <!-- LOCAL DEPLOY -->
	  <target name="local-deploy" description="Deploy webapp to local dir (farm)">
	    <echo level="info" message="war = 'file://${dist}/${appName}.war'"/>
	    <copy file="${dist}/${appName}.war" todir="${deploy.home}"/>
	  </target>

  <!-- remote deployment -->
  <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"
      classpathref="classpath"/>
  <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"
      classpathref="classpath"/>
  <target name="remote-redeploy"
      description="Undeploy and then redeploy webapp to remote tomcat">
    <antcall target="remote-undeploy"/>
    <waitfor maxwait="1000" maxwaitunit="millisecond">
      <equals arg1="1" arg2="2"/>
    </waitfor>
    <antcall target="remote-deploy"/>
  </target>
  <target name="remote-deploy" description="Deploy webapp to remote tomcat">
    <echo level="info" message="war = 'file://${dist}/${appName}.war'"/>
    <deploy url="http://${manager.host}:8080/manager/text" path="/${appName}"
        username="${manager.user}" password="${manager.pass}"
        war="file://${dist}/${appName}.war"/>
  </target>
  <target name="remote-undeploy" description="Remove webapp from remote tomcat">
    <undeploy url="http://${manager.host}:8080/manager/text" path="/${appName}"
          username="${manager.user}" password="${manager.pass}"
          failonerror="false"/>
  </target>
  <target name="convert" description="Convert demo excel file" depends="compile">
    <property name="convert.source" value="${web}/files/conversion_demo.xlsx"/>
    <echo message="convert.source: ${convert.source}"/>
    <java classname="edu.ucsd.library.xdre.tab.Demo" classpathref="execpath">
      <arg line="${convert.source} ${tmp}/converted"/>
    </java>
  </target>

  <target name="junit" depends="compile">
    <junit printsummary="yes" haltonfailure="no">
      <classpath refid="classpath" />
      <classpath location="${webapp}/WEB-INF/classes" />
      <formatter type="xml" />
      <formatter type="plain" />

      <batchtest fork="yes" todir="${tmp}">
        <fileset dir="${test}">
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>
</project>
